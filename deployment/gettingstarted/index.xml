<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FoundryVTT 中文社区 – 服务器部署入门</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/</link><description>Recent content in 服务器部署入门 on FoundryVTT 中文社区</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://fvtt-cn.github.io/deployment/gettingstarted/index.xml" rel="self" type="application/rss+xml"/><item><title>Deployment: 云服务器挑选/购买指南</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/cloud/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>云服务器挑选和购买指南，与各云服务提供商&lt;em>利益无关&lt;/em>&lt;/p>
&lt;/div>
&lt;h2 id="选购建议">选购建议&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;p>以当前的 FVTT 运行情况看，如果服务器上只运行 FVTT，那么 1G 内存的 Linux 服务器和 2G 内存的 Windows 服务器足够使用。&lt;/p>
&lt;p>CPU 核心数尽管对运行效率有直接影响，但单核心也足以满足多人游玩 FVTT。&lt;/p>
&lt;p>最重要的因素其实是带宽，如果购买 1Mbps 带宽的服务器用来跑 5 个人的团，意味着每个人在游玩时仅能分配到 200 Kbps = 25 KB/s。
如果一个新场景内的地图 2.5M 大小，则所有玩家平均需要等待 100 秒来下载完毕整张地图，更不必提还需要下载其他资源，&lt;em>尤其是在服务器上存储了音乐等情况&lt;/em>。&lt;/p>
&lt;p>通常认为，运行 FVTT 的服务器带宽最好要在 &lt;strong>5Mbps 以上&lt;/strong>（越高越好）。&lt;/p>
&lt;p>&lt;strong>然而&lt;/strong>，云服务的按带宽计费的价格非常高，如果要提升到 5+Mbps 往往需要远高于其他配置的成本，并且会造成闲时带宽的浪费。如果可以接受按流量计费（每 GB 一般 0.8 元上下），则带宽大小本身不会被计费，可以设置到 100+Mbps，运行 FVTT 绰绰有余。&lt;/p>
&lt;h3 id="系统">系统&lt;/h3>
&lt;p>参见&lt;a href="../#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94">部署方式对比&lt;/a>。&lt;/p>
&lt;p>&lt;em>值得注意的是，Docker 部署方式可使用任意一个主流的 Linux 发行版作为操作系统&lt;/em>。&lt;/p>
&lt;h3 id="地域">地域&lt;/h3>
&lt;p>云服务器的数据中心地理位置可能是最能直接影响体验的 &lt;em>非直观&lt;/em> 要素，需要斟酌。&lt;/p>
&lt;p>数据中心的地理位置，可以决定以下几个重要的判断要素：&lt;/p>
&lt;ul>
&lt;li>网络连接质量
&lt;ul>
&lt;li>墙内玩家占多数，甚至全部都是，那最好选择大陆或者香港的云服务，或者其他 CN2 线路服务器；反之全部都在境外的话，强烈建议选择境外云服务&lt;/li>
&lt;li>如果境内外玩家都有，可以考虑在香港部署，大多数的香港数据中心对境内外的访问质量都还算不错，至少不需要考虑境外玩家访问香港服务器的质量，而境内需要先行评估（或者使用全站加速，并且配置为全球加速）&lt;/li>
&lt;li>考虑玩家时也要注意，FVTT 一次部署可以一直使用。如果一直使用且玩家变动很大，GM 可以只考虑自己的访问质量&lt;/li>
&lt;li>尽管境内服务器对墙内玩家提供了更优质的访问质量，但同时也因为墙的存在，更难以下载位于境外服务器上的 FVTT 的游戏系统、MOD 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>域名、备案
&lt;ul>
&lt;li>境内云服务器上，如果提供有域名的网页服务（直接访问 IP 并使用其他端口除外），则一定需要备案才能访问&lt;/li>
&lt;li>境外（比如香港）的云服务器，不需要备案即可提供域名访问&lt;/li>
&lt;li>如果在境内购买云服务，域名最好在同一家云服务提供商处购买；如果在境外，域名可以在 GoDaddy 或境内的云服务提供商购买&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>价格
&lt;ul>
&lt;li>境内云服务比境外贵不少，配置、带宽的价格都要高&lt;/li>
&lt;li>考虑学生机的价格，如果能购买学生机，价格远比正常购买便宜，但往往会因此只能购买位于境内的固定地理位置的数据中心（参见&lt;a href="#%E5%AD%A6%E7%94%9F%E6%9C%BA">学生机&lt;/a>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="厂商">厂商&lt;/h3>
&lt;p>厂商虽然对使用云服务的体验影响很大，但没必要比较性能（FVTT 不太吃性能），也不必评论谁好谁坏。&lt;/p>
&lt;p>主流购买选择：&lt;/p>
&lt;blockquote>
&lt;p>境内：阿里云、腾讯云
&lt;br/>
境外：阿里云（香港为主）、 AWS、 Azure、搬瓦工&lt;/p>
&lt;/blockquote>
&lt;h3 id="学生机">学生机&lt;/h3>
&lt;p>阿里云、腾讯云、百度云等等，会对国内学生提供学生优惠。&lt;/p>
&lt;p>这些学生机面向大学生推出，一般年龄不超过 24 岁的用户都可以享受折扣，使得一台单核心 2GB 内存的服务器仅需 10 元/月或更低，拿来开 FVTT 服务器正好。&lt;/p>
&lt;p>但&lt;strong>需要注意&lt;/strong>以下的坑：&lt;/p>
&lt;ul>
&lt;li>带宽：不少学生机默认只给 1Mbps 的带宽，正如上文所提到的那样，用来运行 FVTT 只会让你怀疑人生&lt;/li>
&lt;li>某某云：某某云的学生机目前只有 ARM 架构的 CPU 可选。如果你对 Linux 没有太多使用经验，你可能会怀疑买了假服务器&lt;/li>
&lt;/ul>
&lt;p>一般提到学生机，都会购买国内的。但如果不嫌麻烦的话（需要通过国际学生认证，或教育邮箱认证），国际上的学生优惠，可选项会很多：&lt;/p>
&lt;p>比如通过 GitHub 学生认证，可以获得：&lt;/p>
&lt;ul>
&lt;li>DigitalOcean 学生优惠（送 50 刀，单核 1G 配置，可以购买 10 个月）&lt;/li>
&lt;li>Azure 学生优惠（送 100 刀，单核 1G 配置的香港服务器，可以购买 9 个月）&lt;/li>
&lt;li>Namecheap 的域名一年&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>如果认证无法通过，那境内最好的选择可能就是阿里云轻量应用服务器，简单直接没有别的套路，5Mbps 还算能用，每个月 1TB 的流量跑 FVTT 管够。&lt;/p>
&lt;h2 id="其他问题">其他问题&lt;/h2>
&lt;p>除了选购以外，使用云服务器过程中也可能遇到其他问题。&lt;/p>
&lt;h3 id="部署完毕后无法访问">部署完毕后无法访问&lt;/h3>
&lt;p>无论使用那种方式部署，完毕后，如果无法访问，常常是因为云服务器的防火墙设置，尚未放行 FVTT 正在使用的端口。&lt;/p>
&lt;p>一般来说，如果设置了域名并反代，需要设置&lt;strong>入方向&lt;/strong>的端口 80, 443 开放。&lt;/p>
&lt;p>而如果只是使用 30000 端口或者修改的其他端口，只需要设置对应端口在&lt;strong>入方向&lt;/strong>上开放即可。&lt;/p>
&lt;p>或者，可以放行所有端口，更方便用户正常使用。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="../docker/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B">Docker 部署方式自动脚本&lt;/a>如果不使用域名，文件管理器的网站需要打开入方向 30001 端口，仪表盘需要打开入方向 30002 端口。&lt;/p>
&lt;/blockquote>
&lt;p>以下是几种常见的云服务器的防火墙设置方法：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/25471.html">阿里云 ECS&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/59086.html">阿里云轻量应用服务器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/document/product/213/15377">腾讯云 CVM&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://cloud.tencent.com/document/product/1207/44577">腾讯轻量应用服务器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-cn/azure/virtual-machines/windows/nsg-quickstart-portal">Azure VM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/connect-http-https-ec2/">AWS EC2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Deployment: 域名购买/绑定指南</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/domain-name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/domain-name/</guid><description>
&lt;h2 id="购买域名">购买域名&lt;/h2>
&lt;p>目前各大云服务提供商基本都提供了域名购买、托管以及 DNS 解析服务，实现一站式服务。&lt;/p>
&lt;p>服务器对域名没有任何要求，但需要注意，如果购买域名并绑定国内服务器使用，则需要备案，而备案对域名后缀（顶级域名）有要求。目前国内云平台购买域名时，如果遇到不能备案的后缀，会提示无法备案，所以注意查看信息就不必担心购买域名之后无法使用的问题。&lt;/p>
&lt;p>使用域名一般有如下要求和步骤：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>选择域名&lt;/strong>，全凭个人喜好，但注册之后无法更换，只能新买&lt;/li>
&lt;li>&lt;strong>付款、续费&lt;/strong>，域名一般按年购买，到期之前需要续费，否则会被回收（不少首年便宜的域名，续费价格很高）&lt;/li>
&lt;li>&lt;strong>实名认证&lt;/strong>，需要填写个人信息并公开，部分域名商可以隐藏域名拥有者实名信息（备案要求必须匹配实名）&lt;/li>
&lt;li>&lt;strong>DNS 解析&lt;/strong>，利用 DNS 解析服务，&lt;a href="#%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D">绑定域名到服务器&lt;/a>或者做其他解析&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在国内购买域名，域名注册局要求需要提供身份证等信息进行实名认证，这也是备案的必需前置步骤&lt;/p>
&lt;/blockquote>
&lt;h2 id="备案">备案&lt;/h2>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">可选&lt;/h4>
仅国内服务器架设网站使用域名时需要备案，如果使用境外服务器（含香港），无需备案
&lt;/div>
&lt;p>目前方便的备案方式是通过各个云服务自己的备案渠道申请，这就要求需要在该平台购买云服务器或者域名（比如腾讯云就对此有要求），所以尽量在一个云服务提供商处解决所有问题，而不要拼凑着买。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://beian.miit.gov.cn/">工信部自行备案&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://beian.aliyun.com/">阿里云备案&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/product/ba">腾讯云备案&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="绑定子域名">绑定（子）域名&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
国内服务器未备案无法使用域名来访问网站
&lt;/div>
&lt;p>绑定域名依赖于购买域名的域名提供商和 DNS 服务，各家的界面、操作会有一些不同，但域名的基本管理方式和相关术语是一致的。简单来说，&lt;strong>你需要创建一条 A 记录，映射到你将要安装 FVTT 的服务器的 IP 地址&lt;/strong>。&lt;/p>
&lt;p>如图所示，腾讯云的 DNS 解析管理界面，正在添加的记录便是 &lt;code>foundry.xxx.yyy&lt;/code>（&lt;code>foundry&lt;/code> 是子域名，&lt;code>xxx.yyy&lt;/code> 是你注册的域名），其他 DNS 解析设置界面大同小异，详细可以参见平台自己的帮助。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>主机记录&lt;/strong>填写你想使用的子域名（比如&lt;code>foundry&lt;/code>），或者使用&lt;code>@&lt;/code>来代表直接使用 &lt;code>xxx.yyy&lt;/code> 访问&lt;/li>
&lt;li>&lt;strong>记录类型&lt;/strong>选择 A 记录&lt;/li>
&lt;li>&lt;strong>记录值&lt;/strong>填写需要服务器的 &lt;strong>公网&lt;/strong> IP，其他 IP 无法访问&lt;/li>
&lt;/ul>
&lt;p>其他设置都使用默认设置即可。&lt;/p>
&lt;p>&lt;img src="https://fvtt-cn.github.io/images/deployment/domain-name.png" alt="">&lt;/p></description></item><item><title>Deployment: Ubuntu 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/ubuntu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/ubuntu/</guid><description>
&lt;blockquote>
&lt;p>本篇教程参考 FVTT 英文社群网站 &lt;a href="https://foundry-vtt-community.github.io/wiki/Ubuntu-VM/">Ubuntu VM 部署教程&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>Ubuntu 目前逐步取代了其他发行版，取得了新的大量的市场份额，无论是在桌面端还是在服务器端。这篇教程主要讲述如何在安装了 Ubuntu Server 的服务器上部署 Foundry VTT，并使其保持运行并使用反向代理访问。&lt;/p>
&lt;p>我们会使用 node 的进程管理工具来保证 Foundry VTT 的实例持续运行，而且提供详尽的统计信息，还包括方便的启动、停止、重启命令，以及服务器重启时自动启动 FVTT 的服务。&lt;/p>
&lt;p>如果拥有域名的话，你和玩家们将会从浏览器上输入域名，通过 HTTPS 加密的反向代理访问 FVTT；如果没有使用到域名，也会输入反代后的对应 IP 和端口访问。&lt;/p>
&lt;p>本篇教程介绍的部署方式，不会直接让玩家们访问 FVTT 实例暴露出的端口。这样做可以获得一些反代的优势，同时不会有什么显著的缺点，了解反代的优劣势具体可以参考网上一些介绍反向代理的文章。&lt;/p>
&lt;h2 id="配置服务器环境">配置服务器环境&lt;/h2>
&lt;p>Ubuntu 服务器上运行 FVTT，需要配置好运行环境：&lt;/p>
&lt;ul>
&lt;li>Node.js 运行时，其对应的软件包管理器 npm，以及使用 npm 安装的 pm2（进程管理工具）&lt;/li>
&lt;li>反向代理软件 Caddy，以及其暴露端口的防火墙（比如 80、443）&lt;/li>
&lt;/ul>
&lt;p>首先，假设已经登入了 Ubuntu Server 服务器，并且能够获得 root 权限。&lt;/p>
&lt;h3 id="第一步安装-nodejs-npm-和-unzip">第一步：安装 Node.js, npm 和 Unzip&lt;/h3>
&lt;p>运行下面命令（适用于 Ubuntu，其他 Linux 发行版使用的命令可能不一致）：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -sL https://deb.nodesource.com/setup_12.x &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo bash -
sudo apt install -y nodejs unzip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令会安装 node.js 以及包管理器 npm。使用 &lt;code>node --version&lt;/code> 和 &lt;code>npm --version&lt;/code> 来确认安装是否成功以及版本号。&lt;/p>
&lt;h3 id="第二步安装-caddy">第二步：安装 Caddy&lt;/h3>
&lt;p>运行以下命令将会安装 Caddy：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;deb [trusted=yes] https://apt.fury.io/caddy/ /&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo tee -a /etc/apt/sources.list.d/caddy-fury.list
sudo apt update
sudo apt install caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令将会同时创建用于启动 Caddy 的 Linux 用户和用户组，接下来启用 Caddy 服务：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl &lt;span style="color:#204a87">enable&lt;/span> caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="第三步安装-nodejs-进程管理工具pm2">第三步：安装 Node.js 进程管理工具：pm2&lt;/h3>
&lt;p>使用刚才安装的 npm，全局安装 pm2：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo npm install -g pm2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="第四步下载-fvtt-并测试">第四步：下载 FVTT 并测试&lt;/h3>
&lt;p>创建 FVTT 使用的目录并切换：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir /tmp/foundrydata &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> mkdir ~/foundrydata
mkdir ~/foundry &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ~/foundry
&lt;span style="color:#204a87">pwd&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pwd&lt;/code> 命令输出结果应当是 &lt;code>/home/[XXX]/foundry&lt;/code>，&lt;code>[XXX]&lt;/code> 是登录服务器使用的 Linux 用户名。&lt;/p>
&lt;p>从官网上获取 FVTT 下载链接（Linux），在服务器上运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget &lt;span style="color:#4e9a06">&amp;#34;https://foundryvtt.s3-us-west-2.amazonaws.com/releases/[Key]/FoundryVirtualTabletop-linux-x64.zip&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>后面的这段链接替换为从官网处复制到的链接&lt;/strong>。&lt;/p>
&lt;p>下载完毕后，解压 FVTT（如果文件名不一致，更换为下载保存的 FVTT 压缩包文件名）：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">unzip FoundryVirtualTabletop-linux-x64.zip
rm FoundryVirtualTabletop-linux-x64.zip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后测试确认 FVTT 是否能够正常运行：&lt;code>node $HOME/foundry/resources/app/main.js --port=62621 --dataPath=/tmp/foundrydata&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-07-06 07:48:44 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Foundry Virtual Tabletop - Version 0.6.5
FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-07-06 07:48:44 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Running on Node.js - Version 12.18.2
FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-07-06 07:48:44 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Application Options:
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;port&amp;#34;&lt;/span>: 62621,
&lt;span style="color:#4e9a06">&amp;#34;dataPath&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;/tmp/foundrydata&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;upnp&amp;#34;&lt;/span>: false,
&lt;span style="color:#4e9a06">&amp;#34;fullscreen&amp;#34;&lt;/span>: false,
&lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;routePrefix&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;sslCert&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;sslKey&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;awsConfig&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;proxySSL&amp;#34;&lt;/span>: false,
&lt;span style="color:#4e9a06">&amp;#34;proxyPort&amp;#34;&lt;/span>: null
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果显示类似于上述的输出结果并且没有显示什么错误，证明 FVTT 已经可以正常运行了！&lt;/p>
&lt;p>然后按下 &lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>C&lt;/kbd> 直接杀掉用来测试的 FVTT 进程，准备进行下一步。&lt;/p>
&lt;h2 id="pm2-运行-fvtt">pm2 运行 FVTT&lt;/h2>
&lt;p>需要的运行环境都已经配置完毕，接下来需要将 pm2 设置为随系统启动，并让 pm2 管理和运行 FVTT 进程。&lt;/p>
&lt;h3 id="pm2-配置为系统服务">pm2 配置为系统服务&lt;/h3>
&lt;p>首先我们要将 pm2 设置为随服务器开机启动。可以使用 pm2 自带的服务文件生成，对于 Ubuntu 系统，执行：&lt;code>pm2 startup&lt;/code>，结果如下：&lt;/p>
&lt;pre>&lt;code>[PM2] Init System found: systemd
[PM2] To setup the Startup Script, copy/paste the following command:
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u [XXX] --hp /home/[XXX]
&lt;/code>&lt;/pre>&lt;p>它生成了一个命令，即&lt;code>sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u [XXX] --hp /home/[XXX]&lt;/code>这一部分，其中 &lt;code>[XXX]&lt;/code> 会被自动替换为当前登录使用的用户。复制输出的这段命令（而非从网页上复制）并且执行：&lt;/p>
&lt;blockquote>
&lt;p>如果使用 root 执行 &lt;code>pm2 startup&lt;/code> 命令，则会直接配置为系统服务，不需要复制粘贴命令执行&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PM2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>v&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Command successfully executed.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果输出结果中含有以上这段，基本上 pm2 已经被配置为系统服务。&lt;/p>
&lt;h3 id="pm2-启动-fvtt-并持续运行">pm2 启动 FVTT 并持续运行&lt;/h3>
&lt;p>现在需要使用 pm2 启动 FVTT，并且让 pm2 记住需要保持 FVTT 的运行，如此就可以让 pm2 在每次服务器重启时都会跟随启动，不需要手动。&lt;/p>
&lt;p>使用 pm2 启动 FVTT，还是一样 &lt;code>[xxx]&lt;/code> 替换为登录服务器使用的用户名：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pm2 start &lt;span style="color:#000">$HOME&lt;/span>/foundry/resources/app/main.js --name foundry -- --port&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span> --dataPath&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$HOME&lt;/span>/foundrydata
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>端口号&lt;code>8080&lt;/code>可以调整，但是后续的端口号都需要对应修改&lt;/p>
&lt;/blockquote>
&lt;p>运行完毕后，使用 &lt;code>pm2 list&lt;/code> 来查看 pm2 正在管理的进程实例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PM2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Starting /home/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>XXX&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>/foundry/resources/app/main.js in fork_mode &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> instance&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PM2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Done.
┌──────────┬────┬─────────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬────────┬──────────┐
│ App name │ id │ version │ mode │ pid │ status │ restart │ uptime │ cpu │ mem │ user │ watching │
├──────────┼────┼─────────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼────────┼──────────┤
│ foundry │ &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> │ 0.6.5 │ fork │ &lt;span style="color:#0000cf;font-weight:bold">31130&lt;/span> │ online │ &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> │ 0s │ 0% │ 8.9 MB │ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>XXX&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> │ disabled │
└──────────┴────┴─────────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴────────┴──────────┘
Use &lt;span style="color:#4e9a06">`&lt;/span>pm2 show &amp;lt;id&lt;span style="color:#000;font-weight:bold">|&lt;/span>name&amp;gt;&lt;span style="color:#4e9a06">`&lt;/span> to get more details about an app
&lt;/code>&lt;/pre>&lt;/div>&lt;p>pm2 会展示如上所示的列表，并且展示大量有用的信息，比如是否运行中，进程重启次数，运行时间， CPU 使用率和内存使用率等等。使用 &lt;code>pm2 show foundry&lt;/code> 可以展示更详尽的关于启动的 FVTT 进程的信息。&lt;/p>
&lt;p>接下来使用 &lt;code>pm2 save&lt;/code>，即可保存配置，令 pm2 记住对 FVTT 进程的管理。&lt;/p>
&lt;ul>
&lt;li>&lt;code>pm2 start foundry&lt;/code> 启动 FVTT&lt;/li>
&lt;li>&lt;code>pm2 stop foundry&lt;/code> 停止 FVTT&lt;/li>
&lt;li>&lt;code>pm2 restart foundry&lt;/code> 重启 FVTT&lt;/li>
&lt;li>&lt;code>pm2 delete foundry&lt;/code> 删除 FVTT 的管理项，不再使用 pm2 管理&lt;/li>
&lt;/ul>
&lt;p>事实上，此处如果 8080 端口防火墙已放行，就应该可以访问了。在自己的浏览器上输入 &lt;code>http://[服务器IP]:8080&lt;/code> 来尝试访问，防火墙放行即可见到 FVTT 的界面；如果不能访问，是好事，因为我们不想开放这个端口。&lt;/p>
&lt;h2 id="设置反向代理">设置反向代理&lt;/h2>
&lt;p>相反，用户应该使用反代来连接，而使用 Caddy 可以简化配置反代的流程。而且，如果用到域名，使用 Caddy 配置 HTTPS 将非常简单，它内置申请 LetsEncrypt 的证书并自动更新的方法，无需额外配置。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">可选&lt;/h4>
&lt;p>&lt;strong>如果使用域名，需要将域名&lt;a href="../domain-name/#%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D">绑定&lt;/a>上&lt;/strong>&lt;/p>
&lt;p>接下来使用到的域名都假定为 &lt;code>my.foundry.com&lt;/code>，记得替换为自己的域名&lt;/p>
&lt;/div>
&lt;p>执行 &lt;code>sudo nano /etc/caddy/Caddyfile&lt;/code>，将会开始编辑 Caddy 的配置文件。使用域名和不使用域名基本配置文件的内容都近似，在命令进入的 nano 界面中，输入以下内容，根据使用域名与否来区分：&lt;/p>
&lt;ul>
&lt;li>不使用域名
&lt;pre>&lt;code>:80 {
reverse_proxy localhost:8080 {
header_up Host {host}
header_up X-Real-IP {remote_host}
header_up X-Forwarded-For {remote_host}
header_up X-Forwarded-Proto {scheme}
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>使用域名
&lt;pre>&lt;code>my.foundry.com {
reverse_proxy localhost:8080 {
header_up Host {host}
header_up X-Real-IP {remote_host}
header_up X-Forwarded-For {remote_host}
header_up X-Forwarded-Proto {scheme}
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>输入或者粘贴完毕后，按下 &lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>X&lt;/kbd>，接着按 &lt;kbd>y&lt;/kbd> 并且回车，确认保存文件。&lt;/p>
&lt;p>然后启动已经配置好的 Caddy 服务即可：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl start caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待一段时间后，通过你设置的域名或者服务器 IP 地址，即可访问已经部署完毕的 FVTT，尽情使用吧。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
如果无法访问，检查是否开启服务器防火墙的 80/443 端口，这两个端口需要打开
&lt;/div></description></item><item><title>Deployment: CentOS 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/centos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/centos/</guid><description>
&lt;blockquote>
&lt;p>这里介绍&lt;a href="https://www.peatsuki.com/008.html">雙月ひめは的 CentOS 教程&lt;/a>以及其&lt;a href="https://www.peatsuki.com/010.html">一键部署脚本教程&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="脚本部署">脚本部署&lt;/h2>
&lt;p>你需要一个CentOS7.x版本的 linux虚拟机，然后执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo su root
&lt;span style="color:#204a87">cd&lt;/span>
wget https://sh.peatsuki.com/fvtt/InstallFVTT.sh --no-check-certificate
sh InstallFVTT.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;del>&lt;a href="https://foundryvtt.com/">官网地址&lt;/a> 登录以购买的账户以获取下载链接。&lt;/del>
现无需输入官网地址，已经重定向到镜像，但仍需要登入官网购买licence以便激活系统&lt;/p>
&lt;p>安装过程中需要中输入非【P】的任意字符选择 &lt;code>以nohup进行后台运行&lt;/code>。&lt;/p>
&lt;p>若需要使用 PM2 作为后台监视程序，建议有足够的OPS知识后进行选择。&lt;/p>
&lt;p>如需上传文件，需要设置 root 账号密码后使用 SFTP 工具上传，例如 WinSCP 等。&lt;/p>
&lt;hr>
&lt;p>如果因为设置密码造成的系统重启，则需要在远程连接中执行如下内容：（执行后需要等待2-3分钟系统运行即可访问）&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo su root
&lt;span style="color:#204a87">cd&lt;/span>
sh startfvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用脚本在阿里云-centos-机器上部署的教程视频">使用脚本在阿里云 CentOS 机器上部署的教程视频&lt;/h3>
&lt;style>
.aspect-ratio {
position: relative;
width: 100%;
height: 0;
padding-bottom: 75%;
}
.aspect-ratio iframe {
position: absolute;
width: 100%;
height: 100%;
left: 0;
top: 0;
}
&lt;/style>
&lt;div class="aspect-ratio">
&lt;iframe src="https://player.bilibili.com/player.html?bvid=BV1Q54y1v7FX&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true">
&lt;/iframe>
&lt;/div>
&lt;h2 id="手动部署">手动部署&lt;/h2>
&lt;h3 id="0x00-目标服务器">0x00 目标服务器&lt;/h3>
&lt;p>阿里云轻量服务器是一个物美价廉的香港服务器。&lt;/p>
&lt;p>目前定价为 1U1G=24 元、1U2G=34 元。（截至 2020/7/1 日）&lt;/p>
&lt;p>峰值带宽为 30M，流量为 1T-2T 左右。已经足够当我们的服务器使用。&lt;/p>
&lt;p>请注意：由于非大陆地域的虚拟主机提供国际带宽，如在中国大陆使用，会有较大的网络延迟。&lt;/p>
&lt;h3 id="0x01-我的服务器状况">0x01 我的服务器状况&lt;/h3>
&lt;p>我的服务器上已经做了 apache+php+wordpress，并且配置了全域 SSL 和加入 HSTS Preload List。&lt;/p>
&lt;p>经过考虑，我让 FoundryVTT 和这个 wordpress 博客挤一挤。以下制作代码建立在我的环境之下。&lt;/p>
&lt;p>阿里云自带的 WordPress 4.8.1 或许能提供类似环境（不保证）&lt;/p>
&lt;h3 id="0x02-安装nodejs环境来源于官方指导">0x02 安装node.js环境（来源于官方指导）&lt;/h3>
&lt;p>依次运行以下语句&lt;/p>
&lt;pre>&lt;code>sudo yum install -y openssl-devel
curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -
sudo yum install -y nodejs
&lt;/code>&lt;/pre>&lt;h3 id="0x03-创建对应文件夹并下载foundryvtt运作档来源于官方指导">0x03 创建对应文件夹并下载FoundryVTT运作档（来源于官方指导）&lt;/h3>
&lt;p>依次运行以下语句，其中斜线部分需要去你的FoundrtVTT授权页面点击node.js后方的链条按钮获得临时下载地址，并替换斜体部分。&lt;/p>
&lt;pre>
cd $HOME
mkdir foundryvtt
mkdir foundrydata
cd foundryvtt
wget -O foundryvtt.zip "&lt;em>https://foundryvtt.s3.amazonaws.com/releases/0.6.4/foundryvtt-0.6.4.zip&lt;/em>"
unzip foundryvtt.zip
&lt;/pre>
&lt;h3 id="0x04-使用直接运行的方式测试foundrtvtt来源于官方指导">0x04 使用直接运行的方式测试FoundrtVTT（来源于官方指导）&lt;/h3>
&lt;p>运行以下语句并访问你的服务器公网地址测试，例如：&lt;code>http://127.0.0.1:30000&lt;/code>&lt;/p>
&lt;pre>&lt;code>node resources/app/main.js --dataPath=$HOME/foundrydata
&lt;/code>&lt;/pre>&lt;h3 id="0x05-使用pm2创建nodejs值守进程来源于社区指导">0x05 使用PM2创建node.js值守进程（来源于社区指导）&lt;/h3>
&lt;p>依次运行以下语句，安装pm2并创建值守进程&lt;/p>
&lt;pre>&lt;code>cd $home
npm install -g pm2
pm2 start foundrtvtt/resources/app/main.js
&lt;/code>&lt;/pre>&lt;h3 id="0x06-安装ssl证书">0x06 安装SSL证书&lt;/h3>
&lt;pre>&lt;code>cd /foundrydata
mkdir ssl
&lt;/code>&lt;/pre>&lt;p>然后将证书的 crt、key 文件拷贝到 ssl 文件夹下。（建议采用 FTP 方式或者 SFTP 方式）&lt;/p>
&lt;p>打开 FoundryVTT，在 Configuration 中修改以下内容（斜体部分需要根据实际情况修改）&lt;/p>
&lt;ul>
&lt;li>UserDataPath修改为 &lt;em>&lt;code>/root/foundrydata&lt;/code>&lt;/em>&lt;/li>
&lt;li>填写SSL Certifilcate &lt;em>&lt;code>/root/foundrydata/ssl/yourdomain.crt&lt;/code>&lt;/em>&lt;/li>
&lt;li>填写SSL Private Key &lt;em>&lt;code>/root/foundrydata/ssl/yourdomain.key&lt;/code>&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>然后点击 Save Changes 保存配置文件&lt;/p>
&lt;h3 id="0x07配置apache实现反向代理">0x07配置apache实现反向代理&lt;/h3>
&lt;p>修改 &lt;code>/usr/local/apache/conf/httpd.conf&lt;/code> 的内容，添加以下字段：&lt;/p>
&lt;pre>&lt;code>LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
&lt;/code>&lt;/pre>&lt;p>修改 &lt;code>/usr/local/apache/conf/extra/httpd-ssl.conf&lt;/code> 文件，添加以下字段，其中斜下划线部分需要根据实际情况修改：&lt;/p>
&lt;pre>
&amp;lt;VirtualHost *:443&amp;gt;
ServerName &lt;em>&lt;u>yourdomain.com&lt;/u>&lt;/em>
ServerAlias &lt;em>&lt;u>yourdomain.com&lt;/u>&lt;/em>
RewriteEngine On
RewriteCond %{REQUEST_URI} ^/socket.io [NC]
RewriteCond %{QUERY_STRING} transport=websocket [NC]
RewriteRule /(.*) &lt;em>&lt;u>wss://yourdomain.com:30000/$1&lt;/u>&lt;/em> [P,L]
SSLEngine On
SSLProxyEngine on
SSLCertificateFile &lt;em>&lt;u>/root/foundrydata/ssl/yourdomain.crt&lt;/u>&lt;/em>
SSLCertificateKeyFile &lt;em>&lt;u>/root/foundrydata/ssl/yourdomain.key&lt;/u>&lt;/em>
SSLCertificateChainFile &lt;em>&lt;u>/root/foundrydata/ssl/yourdomain_ca.crt&lt;/u>&lt;/em>
Options FollowSymLinks
AllowOverride All
Require all granted
ProxyRequests Off
ProxyPass / "&lt;em>&lt;u>https://yourdomain.com:30000/&lt;/u>&lt;/em>"
ProxyPassReverse / "&lt;em>&lt;u>https://yourdomain.com:30000/&lt;/u>&lt;/em>"
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre>
&lt;p>最后重启apache：
&lt;code>/usr/local/apache/bin/apachectl restart&lt;/code>&lt;/p></description></item><item><title>Deployment: Docker 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/docker/</guid><description>
&lt;p>Foundry VTT 目前拥有若干个来自不同用户实现的 Dockerfile，这些实现中，较为推荐 &lt;a href="https://github.com/felddy/foundryvtt-docker">felddy/foundryvtt&lt;/a> 的镜像，而使用该教程中提供的 Linux 自动部署脚本，可以简化操作，自动部署，无需学习 Docker 的使用和管理。&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>目前可以通过中文社区的自动脚本进行容器化部署，也可以手动启动容器。&lt;/p>
&lt;p>在全新购买的云服务器上使用自动脚本进行部署，最少只需要输入 Foundry VTT 站点上的用户名和密码即可完成，同时脚本也包含了后续更新、维护的方法。&lt;/p>
&lt;h3 id="使用-docker-的优点">使用 Docker 的优点&lt;/h3>
&lt;ul>
&lt;li>无需关心系统环境：只要是主流发行版的 Linux，甚至于 Windows 服务器，只要安装了 Docker，即和其他用户的部署行为一致，难以因系统环境问题出错&lt;/li>
&lt;li>直接使用 Docker 的后台管理：Docker 自己会监控容器内运行的进程状态、网站可访问状态，如果意外情况导致 FVTT 崩溃或无法访问，可以不需要使用 pm2 等进程监控工具即可自动重启、还原&lt;/li>
&lt;li>目前主流的 FVTT 的 Docker 镜像包含内置的自动获取下载地址和授权的脚本，可以简化部署流程&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="使用-docker-的缺点">使用 Docker 的缺点&lt;/h3>
&lt;ul>
&lt;li>如果使用卷挂载，直接访问 FVTT 的数据文件会变得略困难（可以通过 Docker 启动其他容器简化文件访问，以下自动部署脚本已使用 Web 文件管理器解决该问题）&lt;/li>
&lt;li>目前主流的 FVTT 的 Docker 镜像升级时需要重建容器，而不能通过 FVTT 内置更新（以下自动部署脚本可以大幅简化更新流程）&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="使用教程">使用教程&lt;/h2>
&lt;h3 id="自动部署脚本安装流程">自动部署脚本安装流程&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>首先，假设已经登入了 Linux 服务器，并且能够获得 root 权限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载脚本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget -O fvtt.sh https://gitee.com/mitchx7/FoundryDeploy/raw/master/fvtt.sh &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> sudo chmod +x fvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>运行脚本，进行安装&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo ./fvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装时会检查是否能获取 root 权限，并且如果没有安装 Docker 会自动安装。&lt;/p>
&lt;p>境内服务器下载镜像时可能会等待较长时间，可以耐心等待。&lt;/p>
&lt;p>然后脚本会提示输入参数，每条参数输入完成后回车即可，参数包含（✅：必需 | ⭕：可选）：
&lt;img src="https://fvtt-cn.github.io/images/deployment/docker-script-input.png" alt="">&lt;/p>
&lt;ul>
&lt;li>✅ FVTT 账号&lt;/li>
&lt;li>✅ FVTT 密码 （用于获取 FVTT 下载地址/授权信息）&lt;/li>
&lt;li>⭕ 版本号/下载地址
&lt;ul>
&lt;li>直接回车跳过输入版本号，使用最新稳定版即可&lt;/li>
&lt;li>&lt;strong>注意&lt;/strong>：如果使用境内服务器，从 FVTT 官方下载安装包会比较慢，可以考虑粘贴&lt;a href="../../../modules/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E8%A7%A3%E5%86%B3%E7%B3%BB%E7%BB%9F%E5%92%8C-mod-%E9%9A%BE%E4%BB%A5%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98">星界投影&lt;/a>的镜像下载源的 Linux 版本下载链接。&lt;strong>境内服务器强烈推荐使用镜像；境外服务器建议直接输入版本号&lt;/strong>！&lt;/li>
&lt;li>Linux 版 FVTT （即本脚本需要使用的）的星界投影的镜像下载地址为：&lt;code>https://cdn.sbea.in/foundry/linux/foundryvtt-0.7.9.zip&lt;/code>。如果需要使用其他版本，替换链接中的 &lt;code>0.7.9&lt;/code> 即可&lt;/li>
&lt;li>✅ 如果跳过了 FVTT 账号/密码的输入，则必须输入直链下载地址而非版本号来安装，否则无法获取 FVTT 下载地址&lt;/li>
&lt;li>例：&lt;code>0.7.9&lt;/code> 或 &lt;code>https://cdn.sbea.in/foundry/linux/foundryvtt-0.7.9.zip&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 自定义管理密码
&lt;ul>
&lt;li>安装完成后，如果设置了这个密码，需要使用密码才能进入 FVTT 管理界面（游玩无需），强烈推荐进行设置；回车跳过，将不设置密码，使任意用户均可管理 FVTT （包括删除世界等权限）&lt;/li>
&lt;li>例：&lt;code>password&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ FVTT 绑定域名
&lt;ul>
&lt;li>如果为这台服务器绑定了给 FVTT 使用的域名（必须先绑定再安装），可以输入域名（不带 HTTP/HTTPS），否则直接回车跳过&lt;/li>
&lt;li>绑定域名的流程可参见&lt;a href="../domain-name/#%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D">绑定（子）域名&lt;/a>&lt;/li>
&lt;li>例：&lt;code>my.fvtt.com&lt;/code>（你已绑定该服务器的域名）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ FVTT CDN 加速域名
&lt;ul>
&lt;li>如果想要使用 CDN，可以配置一个 CDN 加速域名，详情参见 &lt;a href="../cdn">CDN 配置&lt;/a>章节，否则直接回车跳过&lt;/li>
&lt;li>例：&lt;code>cdn.fvtt.com&lt;/code>（你将设置的 CDN 回源使用的域名）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 使用 Web 文件管理器
&lt;ul>
&lt;li>为了管理文件方便，建议使用。直接回车跳过设置，默认会使用；如果不使用，输入&lt;code>n&lt;/code>再回车&lt;/li>
&lt;li>例：直接回车（使用 Web 文件管理器）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 如果使用 Web 文件管理器，可以绑定域名
&lt;ul>
&lt;li>如果需要给 Web 文件管理器绑定域名使用（必须先绑定再安装），可以输入，否则直接回车跳过&lt;/li>
&lt;li>例：&lt;code>file.fvtt.com&lt;/code>（你已绑定该服务器的域名）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 使用 Docker 仪表盘
&lt;ul>
&lt;li>Docker 仪表盘（Portainer）用来方便的管理服务器上运行的容器（重启、监测状态等），比如 FVTT 和 Web 文件管理器等；默认不会使用，可以直接回车跳过&lt;/li>
&lt;li>例：直接回车（不使用仪表盘）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 如果使用 Docker 仪表盘，可以绑定域名
&lt;ul>
&lt;li>如果需要给 Docker 仪表盘绑定域名使用（必须先绑定再安装），可以输入，否则直接回车跳过&lt;/li>
&lt;li>例：&lt;code>dashboard.fvtt.com&lt;/code>（你已绑定该服务器的域名）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>确认输入好的参数之后，便可以回车等待部署完成。&lt;/p>
&lt;p>&lt;em>部署完成后，Foundry VTT 可能还需要等待一会儿，完成软件的下载&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部署完成后，脚本会提示如何访问 FVTT，如图所示：
&lt;img src="https://fvtt-cn.github.io/images/deployment/docker-script-result.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>以上即是使用 Docker 脚本首次部署的全部流程，如果有无法连接等其他问题可以参见下方 &lt;a href="#docker-%E9%83%A8%E7%BD%B2-faq">Docker 部署 FAQ&lt;/a>&lt;/strong>。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Tips&lt;/h4>
自动部署脚本的其他使用方法和详情，请参见&lt;a href="https://github.com/fvtt-cn/FoundryDeploy">脚本仓库&lt;/a>中的文档
&lt;/div>
&lt;h3 id="使用自动部署脚本更新-foundry-vtt">使用自动部署脚本更新 Foundry VTT&lt;/h3>
&lt;p>Docker 容器为了保证运行时文件尽量不受改动，避免在不同时间启动容器产生了行为上的差异，使用了 &lt;code>--noUpdate&lt;/code> 参数启动容器内的 FVTT，关闭了 Foundry VTT 自动更新的功能，使得用户无法使用 FVTT 内置的检查更新来升级。&lt;/p>
&lt;p>为了解决这个问题，自动部署脚本包含了如何升级容器内 FVTT 版本的方法，这个方法会保证数据文件夹内的文件不受改动，可以放心升级，&lt;em>但 FVTT 升级后再启动世界往往会对世界进行更新&lt;/em>。&lt;/p>
&lt;p>&lt;strong>该方法不仅可以升级版本，还可以方便地用脚本重装同版本或者回退旧版本&lt;/strong>。&lt;/p>
&lt;h4 id="更新脚本">更新脚本&lt;/h4>
&lt;p>更新脚本和下载脚本命令相同，粘贴执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget -O fvtt.sh https://gitee.com/mitchx7/FoundryDeploy/raw/master/fvtt.sh &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> sudo chmod +x fvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="升级流程">升级流程&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>首先移除旧有容器&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo ./fvtt.sh remove
&lt;/code>&lt;/pre>&lt;/div>&lt;p>按提示，输入 &lt;code>y&lt;/code> 后回车确认，等待几秒后，旧版本容器即被成功删除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重建容器，使用新版本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo ./fvtt.sh recreate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入和安装流程非常类似的重建容器流程，默认使用已存储的配置文件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>版本号或者下载地址&lt;/strong>：输入你想升级/回退的版本号或者对应下载地址即可
&lt;ul>
&lt;li>境外服务器输入版本号比如 &lt;code>0.7.9&lt;/code> 即可，境内服务器推荐使用星界投影镜像下载&lt;/li>
&lt;li>星界投影用法例如：&lt;code>https://cdn.sbea.in/foundry/linux/foundryvtt-0.7.9.zip&lt;/code>，需要其他版本，替换其中&lt;code>0.7.9&lt;/code>即可&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果询问&lt;strong>是否需要清除 Caddyfile 内容&lt;/strong>，如无特殊需求，回车跳过确认清除
&lt;ul>
&lt;li>出现该提示的原因一般是之前使用了旧版脚本进行部署，而使用了更新脚本（&lt;code>v1.4.0+&lt;/code>）进行 FVTT 更新，需要完全清空 Caddyfile&lt;/li>
&lt;li>清除 Caddyfile 不会影响之前安装的 FVTT 的世界、合集、模组等文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>为了方便升级和二次部署，脚本运行后默认会存储输入的参数信息。如果不需要存储配置，避免如果服务器被黑之后账号信息可能的泄露，请在脚本运行完毕后删除 &lt;code>fvtt-config&lt;/code> 文件，执行：&lt;/p>
&lt;pre>&lt;code>sudo rm fvtt-config
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="部署教程视频">部署教程视频&lt;/h3>
&lt;style>
.aspect-ratio {
position: relative;
width: 100%;
height: 0;
padding-bottom: 75%;
}
.aspect-ratio iframe {
position: absolute;
width: 100%;
height: 100%;
left: 0;
top: 0;
}
&lt;/style>
&lt;div class="aspect-ratio">
&lt;iframe src="https://player.bilibili.com/player.html?bvid=BV1Bv41167n6&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true">
&lt;/iframe>
&lt;/div>
&lt;h2 id="docker-部署-faq">Docker 部署 FAQ&lt;/h2>
&lt;h3 id="无法完成部署">无法完成部署&lt;/h3>
&lt;p>部署过程中，由于指令输入错误、网络波动之类的原因，可能会出现下载错误，弹出 &lt;code>错误：...&lt;/code> 一类消息并中断部署过程。根据弹出的错误提示，可以进行以下排错。&lt;/p>
&lt;blockquote>
&lt;p>错误：安装 Docker 失败，请查看使用教程 FAQ 或联系脚本作者
&lt;br/>
错误：Docker 无法启动容器，请查看使用教程 FAQ 或联系脚本作者&lt;/p>
&lt;/blockquote>
&lt;p>正在使用的 Linux 发行版可能内核版本过时或并非官方认可，以致无法通过官方脚本安装或者使用 Docker。&lt;/p>
&lt;p>比如 Android 手机内核过时无法启动 Docker、群晖 NAS 无法通过官方安装脚本安装 Docker。&lt;/p>
&lt;p>解决方法是使用 Linux 主流发行版操作系统，如： &lt;code>Ubuntu 16.04+&lt;/code>, &lt;code>CentOS 6+&lt;/code>, &lt;code>Debian Stretch+&lt;/code>, &lt;code>RHEL 7+&lt;/code>, &lt;code>Fedora 32+&lt;/code> 等等。如果采用云服务器进行部署，通常在购买时以及购买后都可以任意选择需要安装的 Linux 发行版，尽量选择主流版本比如 &lt;code>Ubuntu 20.04&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>错误：&amp;hellip; 端口被占用，无法 &amp;hellip; 部署
&lt;br/>
错误：&amp;hellip; 已经启动过，请升级而非安装
&lt;br/>
错误：&amp;hellip; 容器启动失败&lt;/p>
&lt;/blockquote>
&lt;p>出现这种情况的通常原因是已经部署过 FVTT 并且没有按照升级流程的步骤，首先移除旧有容器，需要先执行：&lt;code>sudo ./fvtt.sh remove&lt;/code> 以移除，具体步骤可以参见上文&lt;a href="#%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B">升级流程&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>错误：拉取 &amp;hellip; 失败&lt;/p>
&lt;/blockquote>
&lt;p>境内服务器更容易出现该错误，当网络出现波动，多次尝试后仍然无法成功下载 Docker 镜像后，即报此错。&lt;/p>
&lt;p>报错推出后，可以在执行脚本部署命令前，通过手动拉取解决该问题：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker pull ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>...&lt;/code> 替换为拉取失败的镜像，镜像名称参见下表，境内服务器使用 &lt;code>USTC 源镜像名&lt;/code> 一列：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>报错名&lt;/th>
&lt;th>USTC 源镜像名&lt;/th>
&lt;th>官方源镜像名&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>FoundryVTT&lt;/td>
&lt;td>docker.mirrors.ustc.edu.cn/felddy/foundryvtt:release&lt;/td>
&lt;td>felddy/foundryvtt:release&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Caddy&lt;/td>
&lt;td>docker.mirrors.ustc.edu.cn/library/caddy&lt;/td>
&lt;td>library/caddy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FileBrowser&lt;/td>
&lt;td>docker.mirrors.ustc.edu.cn/filebrowser/filebrowser:alpine&lt;/td>
&lt;td>filebrowser/filebrowser:alpine&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Portainer&lt;/td>
&lt;td>docker.mirrors.ustc.edu.cn/portainer/portainer-ce&lt;/td>
&lt;td>portainer/portainer-ce&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>拉取成功后，再执行脚本部署命令。&lt;/p>
&lt;p>如果始终提示 &lt;code>Error response from ...&lt;/code> 无法成功拉取对应镜像，可以考虑更换为官方源（境内下载偏慢）。如果这样做，执行脚本部署命令需要加上 &lt;code>FORCE_GLO=true&lt;/code>，改为：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo &lt;span style="color:#000">FORCE_GLO&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> ./fvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>更新时同理，在后面添加&lt;/em> &lt;code>recreate&lt;/code> 即可。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>如果多次提示部署失败，可以使用 &lt;code>sudo ./fvtt.sh clear&lt;/code> 接着输入两次 &lt;code>y&lt;/code> 和回车以确认，清空已经完成的所有配置和存储，然后重新尝试全新安装&lt;/p>
&lt;p>&lt;strong>当心！如果已经使用此法运行过 FVTT 并有保存好的世界、模组、合集、游戏等文件，请勿使用 &lt;code>sudo ./fvtt.sh clear&lt;/code> 命令，否则会一并清除所有数据。在如此做之前，请确认你知道你在做什么&lt;/strong>&lt;/p>
&lt;/div>
&lt;hr>
&lt;h3 id="部署完成后进行诊断">部署完成后进行诊断&lt;/h3>
&lt;p>部署完成后，可能会出现无法访问、文件管理器打不开等异常情况，可以使用脚本进行诊断（版本需要 &lt;code>v1.4.0+&lt;/code>，如果版本过低可以参见上文&lt;a href="#%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC">更新脚本&lt;/a>），执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo ./fvtt.sh check
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行诊断时将会如下图一般输出结果，正常情况下结果应类似：
&lt;img src="https://fvtt-cn.github.io/images/deployment/docker-script-diagnose.png" alt="">&lt;/p></description></item><item><title>Deployment: Windows 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/windows/</guid><description>
&lt;blockquote>
&lt;p>本篇教程参考 FVTT 英文社群网站 &lt;a href="https://foundry-vtt-community.github.io/wiki/Windows/">Windows 托管教程&lt;/a>和&lt;a href="http://www.goddessfantasy.net/bbs/index.php?topic=117014.0">猫斯基的 Windows Server 部署教程&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>如果你没有公网 IP，又不缺一台服务器的钱，那么你可以考虑租一台服务器并架设一个 FoundryVTT 在上面。&lt;/p>
&lt;p>服务器有数种系统，例如 Windows、Linux、MacOS、Ubuntu 等。本教程以 Windows 系统为例。&lt;/p>
&lt;p>那么假设你已经购买了服务器，并且安装好了 Windows Server 系统，连接上了&lt;strong>远程桌面&lt;/strong>，接下来就进行部署：&lt;/p>
&lt;h2 id="基础配置">基础配置&lt;/h2>
&lt;h3 id="手动部署过程">手动部署过程&lt;/h3>
&lt;ol>
&lt;li>下载并安装 Node.js，在 &lt;a href="https://nodejs.org/zh-cn/download/">Node.js 官网安装页面&lt;/a>上，点击 Windows 安装包下载&lt;/li>
&lt;li>将 Node.js 安装包通过 &lt;em>远程桌面&lt;/em> 复制到服务器上，然后在服务器上点击安装包文件，一路确认，安装 Node.js&lt;/li>
&lt;li>从 &lt;a href="https://foundryvtt.com/">Foundry VTT 官网&lt;/a>上下载最新包，使用 Node.js 部署，所以选择第四项
&lt;ul>
&lt;li>&lt;img src="https://fvtt-cn.github.io/images/deployment/download-url.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将压缩包通过 &lt;em>远程桌面&lt;/em> 复制到服务器上，直接拖拽或者 &lt;kbd>Ctrl&lt;/kbd>+&lt;kbd>C/V&lt;/kbd> 均可，然后解压到某文件夹内（比如桌面）&lt;/li>
&lt;li>在这个目录下，启动 CMD。如图所示，在资源管理器地址栏下输入 &lt;code>cmd&lt;/code>，然后回车打开 CMD 窗口
&lt;ul>
&lt;li>&lt;img src="https://fvtt-cn.github.io/images/deployment/win-unzip-cmd.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接着运行这个命令
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="color:#000">node&lt;/span> &lt;span style="color:#000;font-weight:bold">.\&lt;/span>&lt;span style="color:#000">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">js&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>如果能够看到进行了类似以下的输出，那么证明启动成功。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-08-15 14:50:37 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Foundry Virtual Tabletop - Version 0.6.5
FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-08-15 14:50:37 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Running on Node.js - Version 14.8.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在自己电脑的浏览器上输入 &lt;code>http://[服务器IP]:30000&lt;/code> 即可访问 FVTT，然后就可以把远程桌面关闭了。&lt;/p>
&lt;blockquote>
&lt;p>服务器 IP 一般是云服务器控制台网页上的公网 IP&lt;/p>
&lt;/blockquote>
&lt;h3 id="在腾讯云-windows-server-服务器上部署的教程视频">在腾讯云 Windows Server 服务器上部署的教程视频&lt;/h3>
&lt;blockquote>
&lt;p>从 26:12 秒开始是部署过程&lt;/p>
&lt;/blockquote>
&lt;style>
.aspect-ratio {
position: relative;
width: 100%;
height: 0;
padding-bottom: 75%;
}
.aspect-ratio iframe {
position: absolute;
width: 100%;
height: 100%;
left: 0;
top: 0;
}
&lt;/style>
&lt;div class="aspect-ratio">
&lt;iframe src="https://player.bilibili.com/player.html?bvid=BV1gE411A7c4&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true">
&lt;/iframe>
&lt;/div></description></item><item><title>Deployment: FoundryVTT 使用 CDN 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/cdn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/cdn/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>CDN 使用指南，基于 &lt;a href="../docker/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B">Docker 部署教程&lt;/a>部署后进行，与各云服务提供商&lt;em>利益无关&lt;/em>&lt;/p>
&lt;/div>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h3 id="cdn-是什么干什么解决了什么问题">CDN 是什么/干什么/解决了什么问题？&lt;/h3>
&lt;p>CDN 是云厂商提供的内容分发网络服务，厂商在各地部署成千上万的服务器，而这些服务器上将会缓存你需要加速访问的站点上的多媒体、脚本、样式等体积较大的&lt;strong>静态内容&lt;/strong>（以及使用全站加速时，代理访问你的站点上的动态内容，比如 FVTT 用到的 WebSocket 连接）。&lt;/p>
&lt;p>通过这些缓存与代理，用户在访问站点时，通常会根据网络情况，自动就近选择离用户近、网络质量好的服务器，代替你原本站点的服务器来提供内容。&lt;/p>
&lt;p>即使你原本站点带宽很小（比如 1Mbps）、与用户之间延迟很高，甚至服务器性能不足。对于一张 10M 大小的图片文件，传递给 5 个用户，每个用户可能需要 7 分钟才能都加载出来。而 CDN 在缓存后，能够以 CDN 自身的速率（可以轻松超过 100 Mbps）就近传输给用户，可能只需一两秒，大大加快了访问速度。&lt;/p>
&lt;p>上面的例子也可以看出，使用 CDN 之后，不再需要考虑“同时多少个用户访问之后，服务器带宽不足，每个人都变很慢”的问题，CDN 服务带宽永远是配置足够的。&lt;/p>
&lt;p>而且，境内云服务的 CDN 流量价格，常常要比服务器按流量计费来得便宜，静态内容加速通常是 0.2 元/GB 左右或更低（预付费流量包等方式）。&lt;/p>
&lt;p>很多 CDN 服务也提供静态内容压缩功能，可以代替你的服务器，对缓存的图片、脚本、样式表文件进行压缩之后传递给用户，降低服务器开销。更棒的是，有些 CDN 服务可以对图片、音频、视频等多媒体资源的缓存，进行动态的剪裁、缩放、压制，大幅降低文件尺寸，实现更快地访问。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">太长，不看&lt;/h4>
CDN 主要解决 FVTT 服务器可能会遇到的带宽不足、延迟高等网络问题，以及一定情况下降低服务器的性能开销与花费开支
&lt;/div>
&lt;h3 id="加速-fvtt-需要使用什么样的-cdn">加速 FVTT 需要使用什么样的 CDN？&lt;/h3>
&lt;p>使用 FVTT 进行跑团，会有大量的图片、脚本文件等静态内容，天然的，非常适合使用 CDN 进行加速，几乎是 CDN 最标准的使用场景。&lt;/p>
&lt;p>但同时也会发现，FVTT 是实时应用程序。比如指示物的移动、聊天消息的发送接收等，都是实时更新的。这些基于 &lt;strong>WebSocket 协议&lt;/strong>的实时数据传输，以及其他的 API 请求，即是&lt;strong>动态内容&lt;/strong>。动态内容，没有办法进行真正意义上的“缓存”。&lt;em>尽管 WebSocket 是动态内容的一种，但不是所有支持动态内容加速的 CDN 都支持 WebSocket，这一点一定要注意&lt;/em>。&lt;/p>
&lt;p>这就需要支持动态内容加速的 CDN 服务，而国内规模大的云厂商，比如阿里云、腾讯云的全站加速功能，都支持动态内容和 WebSocket 的加速，符合 FVTT 使用的需求。&lt;/p>
&lt;p>即，FVTT 使用的 CDN 需要支持：&lt;/p>
&lt;ul>
&lt;li>静态内容，用于提供多媒体、脚本、样式表等各种文件的静态内容加速（只要是 CDN 服务，均支持）&lt;/li>
&lt;li>动态内容，用于提供 API 请求的加速（除非自己配置动静分离，需要 CDN 支持）&lt;/li>
&lt;li>WebSocket，用于提供 FVTT 最常用的 WS 协议的加速（除非自己配置动静分离，需要 CDN 支持）&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">太长，不看&lt;/h4>
一般来说，最好直接使用阿里云、腾讯云的全站加速服务，或者其他支持 WebSocket 的 CDN 服务，免于自己配置动静分离（如果你会配置，应该也不需要看这篇文章）
&lt;/div>
&lt;h3 id="购买时境内境外全球应该怎么选">购买时，境内/境外/全球应该怎么选？&lt;/h3>
&lt;p>正如教程中域名一章里提到的一样，在境内使用域名提供互联网服务尤其是 CDN 服务，是一定需要&lt;a href="../domain-name/#%E5%A4%87%E6%A1%88">备案&lt;/a>的。因此，只要想在境内使用 CDN，你也同样要对你的域名进行备案，然后使用这个备案的域名来加速。&lt;/p>
&lt;p>境外 CDN 则没有这个问题，在境外提供互联网服务无需备案。而且，境外 CDN 也可以在国内访问。但是，境内的玩家访问境外 CDN 速度不甚理想。如果你的服务器在境内，而 CDN 使用“纯”境外，玩家使用 CDN 时可能不仅起不到加速作用，反而拖累了访问速度，这是出口带宽拥挤和墙所导致的问题，除非使用特定手段访问，或者线路不错，否则不建议当你的玩家都在境内时这么做。&lt;/p>
&lt;p>而很多 CDN 包含全球服务，即境内+境外。因为涉及到了提供境内服务，所以同样需要备案。如果你的玩家正好有位于境内的也有境外的，可以考虑使用全球 CDN，一次性解决境内外玩家的加速访问。&lt;/p>
&lt;h2 id="购买配置-cdn">购买/配置 CDN&lt;/h2>
&lt;p>接下来介绍如何购买和配置 CDN。&lt;/p>
&lt;h3 id="docker-部署流程中的注意事项">Docker 部署流程中的注意事项&lt;/h3>
&lt;p>在购买前，先按照 &lt;a href="../docker">Docker 部署教程&lt;/a>进行自动脚本部署，注意在填写参数时，&lt;strong>要输入“FoundryVTT 使用 CDN 时的加速域名”，而且一定不能和“FoundryVTT 已绑定该服务器的域名”一样&lt;/strong>。&lt;/p>
&lt;p>比如你拥有 &lt;code>fvtt.com&lt;/code> 域名，计划使用 &lt;code>my.fvtt.com&lt;/code> 作为 FVTT 绑定域名，使用 &lt;code>cdn.fvtt.com&lt;/code> 作为加速后的域名。&lt;/p>
&lt;p>那么 &lt;code>FoundryVTT 已绑定该服务器的域名&lt;/code>就填写 &lt;code>my.fvtt.com&lt;/code> 后回车，&lt;code>FoundryVTT 使用 CDN 时的加速域名&lt;/code>就填写 &lt;code>cdn.fvtt.com&lt;/code> 后回车。&lt;/p>
&lt;p>部署相关的其他信息参见 &lt;a href="../docker/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B">Docker 部署教程&lt;/a>。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Tips&lt;/h4>
如果使用 CDN 加速域名，可以考虑不使用 FVTT 绑定域名，在输入参数时回车跳过 &lt;code>FoundryVTT 使用 CDN 时的加速域名&lt;/code>即可
&lt;/div>
&lt;p>如此，FVTT 就准备好了使用这个域名进行 CDN 加速，然后可以按下列步骤，配置对应域名的 CDN。&lt;/p>
&lt;h3 id="以阿里云为例配置全站加速">以阿里云为例，配置全站加速&lt;/h3>
&lt;p>以刚才的加速域名 &lt;code>cdn.fvtt.com&lt;/code> 为例，接下来是如何在阿里云上配置全站加速的步骤。阿里云界面若更新，或者使用其他云服务，操作大同小异。&lt;/p>
&lt;p>记住，对境内提供 CDN 一定需要先备案。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>登入控制台后，找到&lt;strong>全站加速&lt;/strong>，并且按提示开通对应服务
&lt;img src="https://fvtt-cn.github.io/images/deployment/cdn/ali-list.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在全站加速的管理页中，选择&lt;strong>域名管理&lt;/strong>，点击&lt;em>添加域名&lt;/em>，然后填写表单&lt;/p>
&lt;ul>
&lt;li>加速域名：使用 CDN 访问 FVTT 的域名，即例中的 &lt;code>cdn.fvtt.com&lt;/code>&lt;/li>
&lt;li>加速区域：依照&lt;a href="#%E8%B4%AD%E4%B9%B0%E6%97%B6%E5%A2%83%E5%86%85%E5%A2%83%E5%A4%96%E5%85%A8%E7%90%83%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E9%80%89">上述 FAQ&lt;/a>按需选择&lt;/li>
&lt;li>端口：和默认一样，选择 80 端口即可&lt;/li>
&lt;/ul>
&lt;p>这里需要注意的是，源站信息的&lt;strong>类型&lt;/strong>和&lt;strong>域名/IP&lt;/strong> 两项内容的填写&lt;/p>
&lt;ul>
&lt;li>如果你使用了 FVTT 绑定域名：
&lt;ul>
&lt;li>&lt;strong>类型&lt;/strong>：选择源站域名&lt;/li>
&lt;li>&lt;strong>域名&lt;/strong>：输入框中填入你的 FVTT 绑定域名（不能是加速域名），优先级不需要修改（例 &lt;code>my.fvtt.com&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果你没有使用 FVTT 绑定域名：
&lt;ul>
&lt;li>&lt;strong>类型&lt;/strong>：选择 IP&lt;/li>
&lt;li>&lt;strong>IP&lt;/strong>：输入框中填入你运行 FVTT 服务器的公网 IP 地址，优先级不需要修改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>确认后，回到域名管理界面，会显示对应域名的 CNAME 项&lt;/p>
&lt;p>复制这一段 CNAME，我们需要把我们这个加速域名 &lt;code>fvtt.cdn.com&lt;/code> 的 CNAME 记录设置为这一段的值。&lt;/p>
&lt;p>阿里云的面板上，提供了如何配置 CNAME 的&lt;a href="https://help.aliyun.com/document_detail/64928.html">帮助文档&lt;/a>，其他域名解析服务也大同小异。&lt;/p>
&lt;p>在你的域名解析管理面板，类似如此配置子域名的 CNAME 即可，比如域名解析服务设置界面如下。&lt;/p>
&lt;p>&lt;img src="https://fvtt-cn.github.io/images/deployment/cdn/cname-set.png" alt="">&lt;/p>
&lt;p>注意，别名或者 CNAME 处记录，是从之前全站加速的域名管理面板复制来的。&lt;/p>
&lt;p>如何绑定域名也可以参见 &lt;a href="../domain-name/#%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D">绑定（子）域名&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置 CDN
在全站加速域名管理面板中点击对应域名的配置，进入配置页面&lt;/p>
&lt;ul>
&lt;li>基本配置：无需修改，只需确认源站信息输入正确即可&lt;/li>
&lt;li>回源配置：我们需要修改两项，&lt;strong>回源 HOST&lt;/strong> 以及&lt;strong>静态协议跟随回源&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>回源 HOST&lt;/strong>：开启，并直接选加速域名即可；或者选自定义域名，然后填写你的加速域名（例 &lt;code>fvtt.cdn.com&lt;/code>）&lt;/li>
&lt;li>&lt;strong>静态协议跟随回源&lt;/strong>：开启，并选择 HTTP 即可&lt;/li>
&lt;li>可选：回源请求超时时间，可以酌情调整，比如改为 180 秒&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>动静态加速规则：
&lt;ul>
&lt;li>&lt;strong>动态加速&lt;/strong>：确认开关处于开启状态，默认是开启的&lt;/li>
&lt;li>&lt;strong>协议跟随回源&lt;/strong>：这里的回源是为动态内容设置的，改为 HTTP 即可&lt;/li>
&lt;li>&lt;strong>自适应缓存&lt;/strong>：开启，自适应缓存会尊重源站的缓存协商&lt;/li>
&lt;li>可选：在缓存配置里，详细设置不同规则下文件的过期时间，&lt;em>但这样做可能会导致使用过期没更新的缓存的文件，需要手动刷新 CDN 的缓存！详见&lt;a href="#%E4%BD%BF%E7%94%A8-cdn%E4%BD%86%E6%98%AF%E4%B8%8D%E4%B8%8E%E6%BA%90%E7%AB%99%E5%8D%8F%E5%95%86">下文&lt;/a>&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTPS 配置：强烈推荐开启 HTTPS 访问，尽管使用 HTTPS 访问，CDN 会额外收取 HTTPS 费用（价格很低）
&lt;ul>
&lt;li>&lt;strong>HTTPS 证书&lt;/strong>：推荐开启 HTTPS 安全加速。如无必要，证书来源选择免费证书，然后同意授权并确认即可&lt;/li>
&lt;li>&lt;strong>HTTP/2 设置&lt;/strong>：HTTPS 启用后才可以开启，默认使用 HTTPS 就会开启，有效提升站点访问速度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>性能优化：
&lt;ul>
&lt;li>&lt;strong>页面优化&lt;/strong>：推荐开启，除非你是 MOD 开发者并使用 CDN 加速站进行开发&lt;/li>
&lt;li>&lt;strong>智能压缩&lt;/strong>：推荐开启，可以小幅度降低静态内容的文件尺寸&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WebSocket：一定要确保 &lt;strong>WebSocket 开关&lt;/strong>处于&lt;strong>开启&lt;/strong>状态
&lt;ul>
&lt;li>&lt;strong>心跳时间&lt;/strong>：可以酌情调整，比如改为 120 秒&lt;/li>
&lt;li>&lt;strong>回源协议&lt;/strong>：这里的回源是为 WebSocket 设置的，选择 HTTP 即可&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果开启了 HTTPS 访问，等待云服务下发好证书后，即可通过加速域名（例 &lt;code>fvtt.cdn.com&lt;/code>）访问
&lt;br/>
如果没有使用 HTTPS，直接浏览器里打开加速域名即可&lt;/p>
&lt;/blockquote>
&lt;p>如果以上配置完毕后，仍然无法正常连接加速域名，请检查域名 CNAME 解析是否正确。&lt;/p>
&lt;p>配置完成后，云服务提供商即会开始按流量、访问次数或者其他计费方式，开始计费。&lt;/p>
&lt;p>如果没有特殊需求的话，可以看一下云服务提供商是否有 CDN 流量包（购买前要确认是否适用于全站加速），预先购买这些流量包可以降低开销。&lt;/p>
&lt;h2 id="fvtt-使用-cdn-的三种情况">FVTT 使用 CDN 的三种情况&lt;/h2>
&lt;blockquote>
&lt;p>举个例子，FVTT 是可口可乐工厂，CDN 是京东。你一直要喝可乐，但你很鸡掰，只会想喝最新批次的可乐（使用服务器上最新的改动）。&lt;/p>
&lt;/blockquote>
&lt;h3 id="不使用-cdn直接访问">不使用 CDN，直接访问&lt;/h3>
&lt;p>不用 CDN，直接访问 FVTT 服务器，等同于：&lt;/p>
&lt;p>你每次要喝可乐，是可口可乐工厂直销给你。但是因为工厂离你远（服务器远），或者工厂的快递不行（线路不好/带宽小），所以等待可乐快递到家会慢（加载慢）。&lt;/p>
&lt;p>好在，你自己家里有个很大的冰箱（浏览器缓存），你可以存很多可乐，方便你不用快递买就可以喝。&lt;/p>
&lt;p>然而你很鸡掰，只喝最新批次，所以你在喝自己冰箱里的可乐之前，会有疑虑：&lt;/p>
&lt;p>你在喝可乐之前，只用问工厂：“&lt;em>我冰箱里的 10 月批次是最新批次吗&lt;/em>”，工厂回复你“&lt;em>是啊&lt;/em>”，你就可以放心地直接喝自己冰箱的可乐了（使用浏览器缓存），而不用等工厂慢递；但如果工厂说：“&lt;em>不，我们已经有 12 月的新批次了&lt;/em>”，而你家冰箱只有 10 月批次的（缓存过期），你就只能再等一次工厂的慢递了。&lt;/p>
&lt;p>这个过程就叫做&lt;strong>协商缓存&lt;/strong>，通过协商确定你用不用缓存（喝不喝你自己家冰箱里的可乐）。&lt;/p>
&lt;h3 id="使用-cdn但是不与源站协商">使用 CDN，但是不与源站协商&lt;/h3>
&lt;p>可口可乐工厂快递给你太慢了，你决定从京东买：&lt;/p>
&lt;p>你从京东下订单，京东（CDN）会跑去找可口可乐下订单（CDN 回源），然后在自己的五湖四海的所有仓库里存一大堆可乐（CDN 缓存），然后用离每一个客户最近的仓库给客户送快递，自然就要比工厂的慢递快很多。&lt;/p>
&lt;p>这样，你每次要喝可乐的时候都找京东要，京东总会安排最近最快的快递（加载快），然后你也会存很多在自己家大冰箱，方便你冰箱里有可乐的时候，可以更快地喝到（浏览器仍然会缓存）。毕竟京东仓库离你再近，也没有你的冰箱离你近。&lt;/p>
&lt;p>但这就有一个问题出现了：当工厂的可乐批次变成 12 月了之后，你从京东买的可能还是 10 月批次（CDN 缓存过期）。&lt;/p>
&lt;p>你喝可乐之前，看了下自己家冰箱里的，是 10 月批次，于是你问京东“&lt;em>是不是 10 月是最新批次&lt;/em>”（和 CDN 协商缓存）。但其实京东也没从工厂下过新的订单了，京东一看，“&lt;em>我这里最新批次也是 10 月&lt;/em>“，你就放心大胆的喝了，结果其实是你不想喝的过期的可乐。&lt;/p>
&lt;p>这个可能导致的问题，举例来说，你 FVTT 服务器上更新的 MOD 已经到了 2.0 版，但 CDN 的缓存里还是之前 FVTT 服务器上的 1.0 版（取决于缓存过期时间规则）：你直接访问 FVTT 服务器地址，这个 MOD 是 2.0 版；但你用 CDN 访问，这个 MOD 就始终是 1.0 版。&lt;/p>
&lt;p>除了 MOD，图片、翻译、脚本和其他资源等，都可能出现类似的过期情形，严重情况下会导致 FVTT 或者 MOD 无法正常使用（比如后端响应格式变更，前端未更新，无法处理新的结果）。&lt;/p>
&lt;h3 id="使用-cdn并且协商">使用 CDN，并且协商&lt;/h3>
&lt;p>这种情况下，等同于你还是从京东买，但是你和京东签订了一个合同：&lt;/p>
&lt;p>你每次要喝可乐的时候，都会告诉京东，我冰箱里的是 10 月批次的，问京东有没有新批次。然后京东会代替你，问工厂有没有新批次。&lt;/p>
&lt;p>如果工厂没有新批次（服务器文件未更改），京东就会告诉你，你就喝你冰箱里的 10 月批次的就行了。&lt;/p>
&lt;p>如果工厂有新批次（服务器文件更新），比如 12 月批次。京东就会立马从工厂下新订单，把自己仓库里的 10 月批次的全倒河里（CDN 淘汰过期缓存），然后储备 12 月的，并且给你发 12 月批次的快递，告诉你有新批次，喝这一批。以后即使你冰箱的喝完了（浏览器缓存清空），再找京东要，京东发给你的，也是最新的批次。&lt;/p>
&lt;p>这样的话，即使工厂更新批次了，你也可以喝到京东送来的新批次，而不是过期的。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Tips&lt;/h4>
使用 &lt;a href="../docker/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B">Docker 脚本&lt;/a>（脚本版本 v1.3+）部署并按&lt;a href="#%E4%BB%A5%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BA%E4%BE%8B%E9%85%8D%E7%BD%AE%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F">上文&lt;/a>的方法配置（没有设置缓存过期时间），CDN 的策略会是&lt;a href="#%E4%BD%BF%E7%94%A8-cdn%E5%B9%B6%E4%B8%94%E5%8D%8F%E5%95%86">使用 CDN 并且协商&lt;/a>。&lt;em>需要 CDN 支持 &lt;code>proxy-revalidate&lt;/code>&lt;/em>
&lt;/div></description></item></channel></rss>